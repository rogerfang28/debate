// @generated by protoc-gen-es v2.6.2
// @generated from file page.proto (package ui, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file page.proto.
 */
export declare const file_page: GenFile;

/**
 * ======================
 * Root Page definition
 * ======================
 *
 * @generated from message ui.Page
 */
export declare type Page = Message<"ui.Page"> & {
  /**
   * Unique page identifier
   *
   * @generated from field: string page_id = 1;
   */
  pageId: string;

  /**
   * Page title (optional)
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Top-level components
   *
   * @generated from field: repeated ui.Component components = 3;
   */
  components: Component[];

  /**
   * Optional theme info
   *
   * @generated from field: ui.Theme theme = 4;
   */
  theme?: Theme;

  /**
   * Extra page-level metadata
   *
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message ui.Page.
 * Use `create(PageSchema)` to create a new message.
 */
export declare const PageSchema: GenMessage<Page>;

/**
 * ======================
 * Component definition
 * ======================
 *
 * @generated from message ui.Component
 */
export declare type Component = Message<"ui.Component"> & {
  /**
   * Unique component ID
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Predefined component type
   *
   * @generated from field: ui.ComponentType type = 2;
   */
  type: ComponentType;

  /**
   * Optional label/text content
   *
   * @generated from field: string text = 3;
   */
  text: string;

  /**
   * Nested components
   *
   * @generated from field: repeated ui.Component children = 4;
   */
  children: Component[];

  /**
   * Tailwind / structured style info
   *
   * @generated from field: ui.Style style = 5;
   */
  style?: Style;

  /**
   * Arbitrary inline CSS (fallback/flexibility)
   *
   * @generated from field: map<string, string> css = 6;
   */
  css: { [key: string]: string };

  /**
   * Event name â†’ action ID
   *
   * @generated from field: map<string, string> events = 7;
   */
  events: { [key: string]: string };

  /**
   * Arbitrary HTML attributes (e.g., data-* attrs)
   *
   * @generated from field: map<string, string> attributes = 8;
   */
  attributes: { [key: string]: string };

  /**
   * For form inputs/buttons
   *
   * @generated from field: string name = 9;
   */
  name: string;

  /**
   * Default or bound value
   *
   * @generated from field: string value = 10;
   */
  value: string;

  /**
   * For lists, dropdowns, menus
   *
   * @generated from field: repeated ui.ListItem items = 11;
   */
  items: ListItem[];
};

/**
 * Describes the message ui.Component.
 * Use `create(ComponentSchema)` to create a new message.
 */
export declare const ComponentSchema: GenMessage<Component>;

/**
 * ======================
 * Styling information
 * ======================
 *
 * @generated from message ui.Style
 */
export declare type Style = Message<"ui.Style"> & {
  /**
   * flex/grid/absolute/etc.
   *
   * @generated from field: ui.LayoutType layout = 1;
   */
  layout: LayoutType;

  /**
   * For absolute/fixed layout
   *
   * @generated from field: ui.Position position = 2;
   */
  position?: Position;

  /**
   * Width & height
   *
   * @generated from field: ui.Size size = 3;
   */
  size?: Size;

  /**
   * Tailwind padding utility (e.g., "p-4")
   *
   * @generated from field: string padding = 4;
   */
  padding: string;

  /**
   * Tailwind margin utility (e.g., "m-2")
   *
   * @generated from field: string margin = 5;
   */
  margin: string;

  /**
   * Tailwind background color class
   *
   * @generated from field: string bg_color = 6;
   */
  bgColor: string;

  /**
   * Tailwind text color class
   *
   * @generated from field: string text_color = 7;
   */
  textColor: string;

  /**
   * Tailwind border utility
   *
   * @generated from field: string border = 8;
   */
  border: string;

  /**
   * Tailwind rounded corners
   *
   * @generated from field: string rounded = 9;
   */
  rounded: string;

  /**
   * Tailwind shadow class
   *
   * @generated from field: string shadow = 10;
   */
  shadow: string;

  /**
   * Tailwind gap utility
   *
   * @generated from field: string gap = 11;
   */
  gap: string;

  /**
   * Allow scroll if content overflows
   *
   * @generated from field: bool scrollable = 12;
   */
  scrollable: boolean;

  /**
   * Any extra Tailwind classes
   *
   * @generated from field: string custom_class = 13;
   */
  customClass: string;
};

/**
 * Describes the message ui.Style.
 * Use `create(StyleSchema)` to create a new message.
 */
export declare const StyleSchema: GenMessage<Style>;

/**
 * @generated from message ui.Position
 */
export declare type Position = Message<"ui.Position"> & {
  /**
   * px or % depending on renderer
   *
   * @generated from field: float x = 1;
   */
  x: number;

  /**
   * @generated from field: float y = 2;
   */
  y: number;

  /**
   * "px", "%", "rem"
   *
   * @generated from field: string unit = 3;
   */
  unit: string;
};

/**
 * Describes the message ui.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export declare const PositionSchema: GenMessage<Position>;

/**
 * @generated from message ui.Size
 */
export declare type Size = Message<"ui.Size"> & {
  /**
   * Tailwind width class or explicit value
   *
   * @generated from field: string width = 1;
   */
  width: string;

  /**
   * Tailwind height class or explicit value
   *
   * @generated from field: string height = 2;
   */
  height: string;
};

/**
 * Describes the message ui.Size.
 * Use `create(SizeSchema)` to create a new message.
 */
export declare const SizeSchema: GenMessage<Size>;

/**
 * ======================
 * Theme (optional)
 * ======================
 *
 * @generated from message ui.Theme
 */
export declare type Theme = Message<"ui.Theme"> & {
  /**
   * Tailwind-compatible color class
   *
   * @generated from field: string primary_color = 1;
   */
  primaryColor: string;

  /**
   * @generated from field: string secondary_color = 2;
   */
  secondaryColor: string;

  /**
   * e.g., "font-sans"
   *
   * @generated from field: string font_family = 3;
   */
  fontFamily: string;

  /**
   * Additional accent color
   *
   * @generated from field: string accent_color = 4;
   */
  accentColor: string;
};

/**
 * Describes the message ui.Theme.
 * Use `create(ThemeSchema)` to create a new message.
 */
export declare const ThemeSchema: GenMessage<Theme>;

/**
 * ======================
 * List items
 * ======================
 *
 * @generated from message ui.ListItem
 */
export declare type ListItem = Message<"ui.ListItem"> & {
  /**
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * Optional icon class for UI frameworks
   *
   * @generated from field: string icon = 3;
   */
  icon: string;
};

/**
 * Describes the message ui.ListItem.
 * Use `create(ListItemSchema)` to create a new message.
 */
export declare const ListItemSchema: GenMessage<ListItem>;

/**
 * ======================
 * Component types
 * ======================
 *
 * @generated from enum ui.ComponentType
 */
export enum ComponentType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: TEXT = 1;
   */
  TEXT = 1,

  /**
   * @generated from enum value: BUTTON = 2;
   */
  BUTTON = 2,

  /**
   * @generated from enum value: INPUT = 3;
   */
  INPUT = 3,

  /**
   * @generated from enum value: TEXTAREA = 4;
   */
  TEXTAREA = 4,

  /**
   * @generated from enum value: NODE_GRAPH = 5;
   */
  NODE_GRAPH = 5,

  /**
   * @generated from enum value: CHAT = 6;
   */
  CHAT = 6,

  /**
   * @generated from enum value: IMAGE = 7;
   */
  IMAGE = 7,

  /**
   * @generated from enum value: CARD = 8;
   */
  CARD = 8,

  /**
   * @generated from enum value: LIST = 9;
   */
  LIST = 9,

  /**
   * @generated from enum value: TABLE = 10;
   */
  TABLE = 10,

  /**
   * @generated from enum value: MODAL = 11;
   */
  MODAL = 11,

  /**
   * @generated from enum value: CONTAINER = 12;
   */
  CONTAINER = 12,

  /**
   * @generated from enum value: FORM = 13;
   */
  FORM = 13,

  /**
   * @generated from enum value: ICON = 14;
   */
  ICON = 14,
}

/**
 * Describes the enum ui.ComponentType.
 */
export declare const ComponentTypeSchema: GenEnum<ComponentType>;

/**
 * ======================
 * Layout, position, size
 * ======================
 *
 * @generated from enum ui.LayoutType
 */
export enum LayoutType {
  /**
   * @generated from enum value: ABSOLUTE = 0;
   */
  ABSOLUTE = 0,

  /**
   * @generated from enum value: FLEX_ROW = 1;
   */
  FLEX_ROW = 1,

  /**
   * @generated from enum value: FLEX_COL = 2;
   */
  FLEX_COL = 2,

  /**
   * @generated from enum value: GRID = 3;
   */
  GRID = 3,

  /**
   * @generated from enum value: INLINE = 4;
   */
  INLINE = 4,
}

/**
 * Describes the enum ui.LayoutType.
 */
export declare const LayoutTypeSchema: GenEnum<LayoutType>;

