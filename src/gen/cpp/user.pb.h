// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: user.proto
// Protobuf C++ Version: 5.29.5

#ifndef user_2eproto_2epb_2eh
#define user_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_user_2eproto;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_ProjectsEntry_DoNotUse;
struct User_ProjectsEntry_DoNotUseDefaultTypeInternal;
extern User_ProjectsEntry_DoNotUseDefaultTypeInternal _User_ProjectsEntry_DoNotUse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class User_ProjectsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  User_ProjectsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User_ProjectsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit User_ProjectsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const User_ProjectsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const User_ProjectsEntry_DoNotUse*>(
        &_User_ProjectsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      35, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class User final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(User* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(User));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR User(
      ::google::protobuf::internal::ConstantInitialized);

  inline User(const User& from) : User(nullptr, from) {}
  inline User(User&& from) noexcept
      : User(nullptr, std::move(from)) {}
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
        &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(User& a, User& b) { a.Swap(&b); }
  inline void Swap(User* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const User& from) { User::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(User* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "User"; }

 protected:
  explicit User(::google::protobuf::Arena* arena);
  User(::google::protobuf::Arena* arena, const User& from);
  User(::google::protobuf::Arena* arena, User&& from) noexcept
      : User(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationsFieldNumber = 5,
    kProjectsFieldNumber = 6,
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kManagerFieldNumber = 4,
    kActiveFieldNumber = 3,
  };
  // repeated string locations = 5;
  int locations_size() const;
  private:
  int _internal_locations_size() const;

  public:
  void clear_locations() ;
  const std::string& locations(int index) const;
  std::string* mutable_locations(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locations(int index, Arg_&& value, Args_... args);
  std::string* add_locations();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_locations(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_locations();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_locations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_locations();

  public:
  // map<string, string> projects = 6;
  int projects_size() const;
  private:
  int _internal_projects_size() const;

  public:
  void clear_projects() ;
  const ::google::protobuf::Map<std::string, std::string>& projects() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_projects();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_projects() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_projects();

  public:
  // string first_name = 1;
  void clear_first_name() ;
  const std::string& first_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_first_name(Arg_&& arg, Args_... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* value);

  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(
      const std::string& value);
  std::string* _internal_mutable_first_name();

  public:
  // string last_name = 2;
  void clear_last_name() ;
  const std::string& last_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_name(Arg_&& arg, Args_... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* value);

  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(
      const std::string& value);
  std::string* _internal_mutable_last_name();

  public:
  // .User manager = 4;
  bool has_manager() const;
  void clear_manager() ;
  const ::User& manager() const;
  PROTOBUF_NODISCARD ::User* release_manager();
  ::User* mutable_manager();
  void set_allocated_manager(::User* value);
  void unsafe_arena_set_allocated_manager(::User* value);
  ::User* unsafe_arena_release_manager();

  private:
  const ::User& _internal_manager() const;
  ::User* _internal_mutable_manager();

  public:
  // bool active = 3;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const User& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> locations_;
    ::google::protobuf::internal::MapField<User_ProjectsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        projects_;
    ::google::protobuf::internal::ArenaStringPtr first_name_;
    ::google::protobuf::internal::ArenaStringPtr last_name_;
    ::User* manager_;
    bool active_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// User

// string first_name = 1;
inline void User::clear_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.ClearToEmpty();
}
inline const std::string& User::first_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:User.first_name)
  return _internal_first_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_first_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:User.first_name)
}
inline std::string* User::mutable_first_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:User.first_name)
  return _s;
}
inline const std::string& User::_internal_first_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_name_.Get();
}
inline void User::_internal_set_first_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.first_name_.Mutable( GetArena());
}
inline std::string* User::release_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:User.first_name)
  return _impl_.first_name_.Release();
}
inline void User::set_allocated_first_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:User.first_name)
}

// string last_name = 2;
inline void User::clear_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.ClearToEmpty();
}
inline const std::string& User::last_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:User.last_name)
  return _internal_last_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_last_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:User.last_name)
}
inline std::string* User::mutable_last_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:User.last_name)
  return _s;
}
inline const std::string& User::_internal_last_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_name_.Get();
}
inline void User::_internal_set_last_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.Set(value, GetArena());
}
inline std::string* User::_internal_mutable_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_name_.Mutable( GetArena());
}
inline std::string* User::release_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:User.last_name)
  return _impl_.last_name_.Release();
}
inline void User::set_allocated_last_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:User.last_name)
}

// bool active = 3;
inline void User::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool User::active() const {
  // @@protoc_insertion_point(field_get:User.active)
  return _internal_active();
}
inline void User::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:User.active)
}
inline bool User::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void User::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// .User manager = 4;
inline bool User::has_manager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.manager_ != nullptr);
  return value;
}
inline void User::clear_manager() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.manager_ != nullptr) _impl_.manager_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::User& User::_internal_manager() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::User* p = _impl_.manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(::_User_default_instance_);
}
inline const ::User& User::manager() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:User.manager)
  return _internal_manager();
}
inline void User::unsafe_arena_set_allocated_manager(::User* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.manager_);
  }
  _impl_.manager_ = reinterpret_cast<::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.manager)
}
inline ::User* User::release_manager() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* released = _impl_.manager_;
  _impl_.manager_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::User* User::unsafe_arena_release_manager() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:User.manager)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* temp = _impl_.manager_;
  _impl_.manager_ = nullptr;
  return temp;
}
inline ::User* User::_internal_mutable_manager() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.manager_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::User>(GetArena());
    _impl_.manager_ = reinterpret_cast<::User*>(p);
  }
  return _impl_.manager_;
}
inline ::User* User::mutable_manager() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::User* _msg = _internal_mutable_manager();
  // @@protoc_insertion_point(field_mutable:User.manager)
  return _msg;
}
inline void User::set_allocated_manager(::User* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.manager_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.manager_ = reinterpret_cast<::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.manager)
}

// repeated string locations = 5;
inline int User::_internal_locations_size() const {
  return _internal_locations().size();
}
inline int User::locations_size() const {
  return _internal_locations_size();
}
inline void User::clear_locations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locations_.Clear();
}
inline std::string* User::add_locations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_locations()->Add();
  // @@protoc_insertion_point(field_add_mutable:User.locations)
  return _s;
}
inline const std::string& User::locations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:User.locations)
  return _internal_locations().Get(index);
}
inline std::string* User::mutable_locations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:User.locations)
  return _internal_mutable_locations()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void User::set_locations(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_locations()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:User.locations)
}
template <typename Arg_, typename... Args_>
inline void User::add_locations(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_locations(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:User.locations)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
User::locations() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:User.locations)
  return _internal_locations();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
User::mutable_locations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:User.locations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_locations();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
User::_internal_locations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locations_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
User::_internal_mutable_locations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.locations_;
}

// map<string, string> projects = 6;
inline int User::_internal_projects_size() const {
  return _internal_projects().size();
}
inline int User::projects_size() const {
  return _internal_projects_size();
}
inline void User::clear_projects() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.projects_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::_internal_projects() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.projects_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& User::projects() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:User.projects)
  return _internal_projects();
}
inline ::google::protobuf::Map<std::string, std::string>* User::_internal_mutable_projects() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.projects_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* User::mutable_projects() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:User.projects)
  return _internal_mutable_projects();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // user_2eproto_2epb_2eh
